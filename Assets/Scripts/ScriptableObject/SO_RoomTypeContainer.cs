using System.Collections.Generic;
using UnityEngine;

[CreateAssetMenu(fileName = "RoomTypeContainer", menuName = "Scriptable Objects/RoomTypeContainer")]
public class SO_RoomTypeContainer : ScriptableObject
{
    // Stores rooms that can be generated normally
    [SerializeField] public List<SO_RoomType> initialRoomTypes;
    // Stores rooms that can only be generated by the other room combinations or specific grammars
    [SerializeField] public List<SO_RoomType> alteredRoomTypes;

    // public Dictionary<int, SO_RoomType> tagIDToObjectDict;

    // // To avoid repeatedly searching through a list, I create a dictionary linking the Enum to the related Scriptable Object
    // // This allows me to use the enum for comparison and creating the room, and can then get additional data from the SO when needed.
    // public void LinkTagIDToObject()
    // {
    //     tagIDToObjectDict = new Dictionary<int, SO_RoomType>();
    //     tagIDToObjectDict.Clear();

    //     for (int i = 0; i < initialRoomTypes.Count; i++)
    //     {
    //         tagIDToObjectDict.Add(initialRoomTypes[i].tagID, initialRoomTypes[i]);
    //     }
    //     for (int i = 0; i < alteredRoomTypes.Count; i++)
    //     {
    //         tagIDToObjectDict.Add(initialRoomTypes[i].tagID, initialRoomTypes[i]);
    //     }
    // }

    public int AllocateTagIDs(int startingIDValue)
    {
        int idIncrementer = startingIDValue;
        for (int i = 0; i < initialRoomTypes.Count; i++)
        {
            initialRoomTypes[i].tagID = idIncrementer++;
        }

        for (int i = 0; i < alteredRoomTypes.Count; i++)
        {
            alteredRoomTypes[i].tagID = idIncrementer++;
        }

        // Return the value, as any other tag storage objects will need to start with this count
        return idIncrementer;
    }
}
